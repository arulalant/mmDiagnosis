import os
import sys
import cdms2
# setting the absolute path of the previous directory
# getting the this py module path by __file__ variable
# pass that __file__ to the os.path.dirname, returns the path of this module
__diagnosisDir__ = os.path.dirname(__file__)
previousDir = os.path.abspath(os.path.join(__diagnosisDir__, '..'))
# adding the previous path to python path
sys.path.append(previousDir)
# importing plot.py, xml_data_acces.py, TimeUtility from previous directory
# diagnosisutils
import diagnosisutils.plot as plot
import diagnosisutils.xml_data_access as xml_data_access
from diagnosisutils.timeutils import TimeUtility
from diagnosisutils.regions import India1, India2, PGlobal
from diag_setup.globalconfig import models, processfilesPath, plotsgraphsPath,\
                               plotLevel, seasons
from diag_setup.varsdict import variables
from diag_setup.gendir import createDirsIfNotExists

# create time utility object
timobj = TimeUtility()


def genMonthAnomalyDirs(modelName, availableMonths):
    """
    :func:`genMonthAnomalyDirs`: It should generate the directory hierarichy
        structure of month anomaly in the plotsgraphspath. And calls the
        function genVectorPlots to make vector plots and save it inside the
        appropirate directory, by reading the u, v nc files of the appropirate
        process month anomaly files path.

    Inputs : modelName is the one of the directories name.
             availableMonths is the dictionary which is generated by fully
             available months from the timeAxis.

    ..note:: It should takes the levels which is set in the global config
             file, and generate the vector plots to those levels only.

    Written By : Arulalan.T

    Date : 11.09.2011
    Updated: 11.12.2011

    """

    uvar, vvar = None, None
    # get the u and v variable name from the global 'vars.txt'
    uvar = variables.get(modelName).get('u').model_var
    vvar = variables.get(modelName).get('v').model_var
    processAnomalyPath = os.path.join(processfilesPath, modelName, 'Anomaly')
    for year in availableMonths:
        # get the months dictionary
        monthdic = availableMonths.get(year)
        # sort the months in correct order
        months = timobj._sortMonths(monthdic.keys())
        year = str(year)
        # geneate the processed anomaly path
        processAnoMonthPath = os.path.join(processAnomalyPath, year,
                                                'Month', 'Analysis')
        # Do process if process anomaly month name directory is exists
        if not os.path.isdir(processAnoMonthPath):
            raise RuntimeError("The process month anomaly files directories  \
                doesnot exists in the path %s. So couldnt plot the winds" % \
                    processAnoMonthPath)
        for month in months:
            # get the start date of the month
            monthStartDate = monthdic.get(month)[0]
            monthName = month.lower()

            # get the available files from this directory
            ncfiles = os.listdir(processAnoMonthPath)
            if ncfiles:
                uPath, vPath = None, None
                # geneate the uvar and vvar nc files path
                for ncfile in ncfiles:
                    if ncfile.startswith(uvar) and ncfile.endswith('.nc'):
                        uPath = processAnoMonthPath + '/' + ncfile
                    elif ncfile.startswith(vvar) and ncfile.endswith('.nc'):
                        vPath = processAnoMonthPath + '/' + ncfile
                # end of for ncfile in ncfiles:
                # create modelName, Anomaly, year, Month, month, WINDS
                # directories if it is not exists
                plotNamePath = createDirsIfNotExists(plotsgraphsPath,
                                          [modelName, 'Anomaly', year,
                                              'Month', monthName, 'WINDS'])
                if not os.listdir(plotNamePath):
                    # directory is empty. So calling below function to
                    # create all vector plot image files in anomaly
                    # directory of plotsgraphspath.
                    if uPath and vPath:
                        genVectorPlots(uvar, vvar, upath = uPath,
                                vpath = vPath, outpath = plotNamePath,
                                month = monthName, date = monthStartDate,
                                region = PGlobal, scale=2, latlabel = 'lat10',
                                 lonlabel = 'lon60', style = 'landscape')
                    else:
                        # one or both paths are none
                        print "The path %s doesnt have uvar, vvar nc files" % processAnoMonthPath
                        print "here obtained upath is %s, vpath is %s" % (uPath, vPath)
                    # end of if upath and vpath:
                else:
                    pass
                    # directory is non empty. Have to check either all the
                    # vars plots image files are exists or not...
                # end of if not os.listdir(plotNamePath):
            else:
                print "Processed anomaly directory is empty in the path", processAnoMonthPath
            # end of if ncfiles:
        # end of for month in months:
    # end of for year in availableMonths:
    print "Done! creation of vector plots of month anomaly for model %s" % modelName
# end of def genMonthAnomalyDirs(modelName, availableMonths):

def genMonthMeanDirs(modelName, availableMonths):
    """
    :func:`genMonthMeanDirs`: It should generate the directory hierarichy
        structure of month mean in the plotsgraphspath. And calls the
        function genVectorPlots to make vector plots and save it inside the
        appropirate directory, by reading the u, v nc files of the appropirate
        process month mean files path.

    Inputs : modelName is the one of the directories name.
             availableMonths is the dictionary which is generated by fully
             available months from the timeAxis.

    ..note:: It should takes the levels which is set in the global config
             file, and generate the vector plots to those levels only.

    Written By : Arulalan.T

    Date : 11.09.2011
    Updated: 11.12.2011

    """

    uvar, vvar = None, None
    # get the u and v variable name from the global 'vars.txt'
    uvar = variables.get(modelName).get('u').model_var
    vvar = variables.get(modelName).get('v').model_var
    processMeanPath = os.path.join(processfilesPath, modelName, 'Mean')
    for year in availableMonths:
        # get the months dictionary
        monthdic = availableMonths.get(year)
        # sort the months in correct order
        months = timobj._sortMonths(monthdic.keys())
        year = str(year)
        processMeanMonthPath = os.path.join(processMeanPath, year, 'Month', 'Analysis')
        # Do process if process mean month name directory is exists
        if not os.path.isdir(processMeanMonthPath):
            raise RuntimeError("The process month mean files directories \
                 doesnot exists in the path %s. So couldnt plot the winds" % \
                    processMeanMonthPath)
        for month in months:
            # get the start date of the month
            monthStartDate = monthdic.get(month)[0]
            monthName = month.lower()

            # get the available files from this directory
            ncfiles = os.listdir(processMeanMonthPath)
            if ncfiles:
                uPath, vPath = None, None
                # geneate the uvar and vvar nc files path
                for ncfile in ncfiles:
                    if ncfile.startswith(uvar) and ncfile.endswith('.nc'):
                        uPath = processMeanMonthPath + '/' + ncfile
                    elif ncfile.startswith(vvar) and ncfile.endswith('.nc'):
                        vPath = processMeanMonthPath + '/' + ncfile
                # end of for ncfile in ncfiles:

                # create modelName, Mean, year, Month, month, WINDS
                # directories if it is not exists
                plotNamePath = createDirsIfNotExists(plotsgraphsPath,
                                            [modelName, 'Mean', year,
                                              'Month', monthName, 'WINDS'])
                if not os.listdir(plotNamePath):
                    # directory is empty. So calling below function to
                    # create all vector plot image files in mean
                    # directory of plotsgraphspath.
                    if uPath and vPath:
                        genVectorPlots(uvar, vvar, upath = uPath,
                                vpath = vPath, outpath = plotNamePath,
                                month = monthName, date = monthStartDate,
                                region = PGlobal, scale = 2,
                                latlabel = 'lat10', lonlabel = 'lon60',
                                style = 'landscape')
                    else:
                        # one or both paths are none
                        print "The path %s doesnt have uvar, vvar nc files" % processMeanMonthPath
                        print "here obtained upath is %s, vpath is %s" % (uPath, vPath)
                    # end of if upath and vpath:
                else:
                    pass
                    # directory is non empty. Have to check either all the
                    # vars plots image files are exists or not...
                # end of if not os.listdir(plotNamePath):
            else:
                print "Processed mean directory is empty in the path", processMeanMonthPath
            # end of if ncfiles:
        # end of for month in months:
    # end of for year in availableMonths:
    print "Done! creation of vector plots of month mean for model %s" % modelName
# end of def genMonthMeanDirs(modelName, availableMonths):

def genSeasonMeanDirs(modelName, availableMonths):
    """
    :func:`genSeasonMeanDirs`: It should generate the directory hierarichy
        structure of season mean in the plotsgraphspath. And calls the
        function genVectorPlots to make vector plots and save it inside the
        appropirate directory, by reading the xml file of the appropirate
        process season mean files path.

    Inputs : modelName is the one of the directories name.
             availableMonths is the dictionary which is generated by fully
             available months from the timeAxis.

    ..note:: It should takes the levels which is set in the global config
             file, and generate the vector plots to those levels only.

    Written By : Arulalan.T

    Date : 11.09.2011
    Updated: 11.12.2011

    """

    uvar, vvar = None, None
    # get the u and v variable name from the global 'vars.txt'
    uvar = variables.get(modelName).get('u').model_var
    vvar = variables.get(modelName).get('v').model_var
    processMeanPath = os.path.join(processfilesPath, modelName, 'Mean')
    for year in availableMonths:
        monthdic = availableMonths.get(year)
        # sort the months in correct order
        months = timobj._sortMonths(monthdic.keys())
        year = str(year)
        processMeanSeasonPath = os.path.join(processMeanPath, year, 'Season')
        for seasonName, season in seasons.iteritems():
            # find out xml time axis months has the seasonal months or not
            seasonMonths = [month for smonth in season for month in months
                            if smonth[:3].lower() == month[:3].lower()]
            if len(seasonMonths) == len(season):
                print "Got the seasonal months for %s season" % seasonName
            else:
                print "Seasonal months are not available for %s season" % seasonName
                continue

            if seasonName.isupper():
                seasonName = seasonName.lower()
            # get the season startdate to access the data
            seasonStartDate = monthdic.get(months[0])
            # get the complete path of process season
            proMeanSeasonChildPath = os.path.join(processMeanSeasonPath, seasonName, 'Analysis')
            # Do process if process mean season name directory is exists
            if not os.path.isdir(proMeanSeasonChildPath):
                raise RuntimeError("The process season mean files directories \
                 doesnot exists in the path %s. So couldnt plot the winds" % \
                    proMeanSeasonChildPath)
            # get the available files from this directory
            ncfiles = os.listdir(proMeanSeasonChildPath)
            if ncfiles:
                uPath, vPath = None, None
                # geneate the uvar and vvar nc files path
                for ncfile in ncfiles:
                    if ncfile.startswith(uvar) and ncfile.endswith('.nc'):
                        uPath = proMeanSeasonChildPath + '/' + ncfile
                    elif ncfile.startswith(vvar) and ncfile.endswith('.nc'):
                        vPath = proMeanSeasonChildPath + '/' + ncfile
                # end of for ncfile in ncfiles:

                # create modelName, Mean, year, Season, seasonName, WINDS
                # directories if it is not exists
                plotNamePath = createDirsIfNotExists(plotsgraphsPath,
                                            [modelName, 'Mean', year,
                                        'Season', seasonName, 'WINDS'])

                if not os.listdir(plotNamePath):
                    # directory is empty. So calling below function to
                    # create all vector plot image files in mean
                    # directory of plotsgraphspath.
                    if uPath and vPath:
                        genVectorPlots(uvar, vvar, upath = uPath,
                                vpath = vPath, outpath = plotNamePath,
                                month = seasonName, date = seasonStartDate,
                                region = India2, scale=2, latlabel = 'lat10', lonlabel = 'lon10')
                    else:
                        # one or both paths are none
                        print "The path %s doesnt have uvar, vvar nc files" % proMeanSeasonChildPath
                        print "here obtained upath is %s, vpath is %s" % (uPath, vPath)
                    # end of if upath and vpath:
                else:
                    pass
                    # directory is non empty. Have to check either all the
                    # vars plots image files are exists or not...
                # end of if not os.listdir(plotNamePath):
            else:
                print "Processed season mean directory is empty in the path", proMeanSeasonChildPath
            # end of if ncfiles:
        # end of for seasonName, season in seasons.iteritems():
    # end of for year in availableMonths:
    print "Done! creation of vector plots of season mean for model %s" % modelName
# end of def genSeasonMeanDirs(modelName, modelpath):

def genSeasonFcstSysErrDirs(modelName, modelHour, availableMonths):
    """
    :func:`genSeasonFcstSysErrDirs`: It should generate the directory hierarichy
        structure of season fcstsyserr in the plotsgraphspath. And calls the
        function genVectorPlots to make vector plots and save it inside the
        appropirate directory, by reading the xml file of the appropirate
        process season fcstsyserr files path.

    Inputs : modelName is the one of the directories name.
             modelHour is the one of the directories name.
             availableMonths is the dictionary which is generated by fully
             available months from the timeAxis.

    ..note:: It should takes the levels which is set in the global config
             file, and generate the vector plots to those levels only.

    Written By : Arulalan.T

    Date : 11.09.2011
    Updated: 11.12.2011

    """

    uvar, vvar = None, None
    # get the u and v variable name from the global 'vars.txt'
    uvar = variables.get(modelName).get('u').model_var
    vvar = variables.get(modelName).get('v').model_var
    processFcstSysErrPath = os.path.join(processfilesPath, modelName, 'FcstSysErr')
    for year in availableMonths:
        monthdic = availableMonths.get(year)
        # sort the months in correct order
        months = timobj._sortMonths(monthdic.keys())
        year = str(year)
        processFcstSeasonPath = os.path.join(processFcstSysErrPath, year, 'Season')
        for seasonName, season in seasons.iteritems():
            # find out xml time axis months has the seasonal months or not
            seasonMonths = [month for smonth in season for month in months
                            if smonth[:3].lower() == month[:3].lower()]
            if len(seasonMonths) == len(season):
                print "Got the seasonal months for %s season" % seasonName
            else:
                print "Seasonal months are not available for %s season" % seasonName
                continue

            if seasonName.isupper():
                seasonName = seasonName.lower()
            # get the season startdate to access the data
            seasonStartDate = monthdic.get(months[0])
            proFcstSeasonChildPath = os.path.join(processFcstSeasonPath, seasonName)
            for hr in modelHour:
                # get the process fcstsyserr hour path
                proFcstHrPath = os.path.join(proFcstSeasonChildPath, hr)
                # Do process if process fcstsyserr hour directory is exists
                if not os.path.isdir(proFcstHrPath):
                    raise RuntimeError("The process season fcstsyserr files directory \
                 doesnot exists in the path %s. So couldnt plot the winds" % \
                                                            proFcstHrPath)
                # get the available files from this directory
                ncfiles = os.listdir(proFcstHrPath)
                if ncfiles:
                    uPath, vPath = None, None
                    # geneate the uvar and vvar nc files path
                    for ncfile in ncfiles:
                        if ncfile.startswith(uvar) and ncfile.endswith('.nc'):
                            uPath = proFcstHrPath + '/' + ncfile
                        elif ncfile.startswith(vvar) and ncfile.endswith('.nc'):
                            vPath = proFcstHrPath + '/' + ncfile
                    # end of for ncfile in ncfiles:

                    # create modelName, FcstSysErr, year, Season,
                    # seasonName, hr, WINDS dirs if it is not exists
                    plotNamePath = createDirsIfNotExists(plotsgraphsPath,
                                [modelName, 'FcstSysErr', year, 'Season',
                                               seasonName, hr, 'WINDS'])

                    if not os.listdir(plotNamePath):
                        # directory is empty. So calling below function to
                        # create all vector plot image files in mean
                        # directory of plotsgraphspath.
                        if uPath and vPath:
                            genVectorPlots(uvar, vvar, upath = uPath,
                                vpath = vPath, outpath = plotNamePath,
                                month = seasonName, date = seasonStartDate,
                                region = India2, scale=4, latlabel = 'lat10', lonlabel = 'lon10')
                        else:
                            # one or both paths are none
                            print "The path %s doesnt have uvar, vvar nc files" % proFcstHrPath
                            print "here obtained upath is %s, vpath is %s" % (uPath, vPath)
                        # end of if upath and vpath:
                    else:
                        pass
                        # directory is non empty. Have to check either all the
                        # vars plots image files are exists or not...
                    # end of if not os.listdir(plotNamePath):
                else:
                    print "Processed season mean directory is empty in the path", proFcstHrPath
                # end of if ncfiles:
            # end of for hr in modelHour:
        # end of for seasonName, season in seasons.iteritems():
    # end of for year in availableMonths():
    print "Done! creation of vector plots of season fcstsyserr for model %s" % modelName
# end of def genSeasonFcstSysErrDirs(modelName, modelHour, availableMonths):

def genVectorPlots(uvar, vvar, upath=None, vpath=None, xmlpath=None,
                        outpath=None, month=None, date=None, level=None,
                      region=None, reference=20.0, scale=1, interval=4,
                         svg=0, png=1, latlabel='lat5', lonlabel='lon5',
                         style='portrait'):
    """
    :func:`genVectorPlots`: It should generate the vector plots in vcs
            background and save it as png(by default) inside the outpath,
            with some default vector properties like reference, scale and
            interval.

    Inputs : uvar is the 'u' variable name
             vvar is the 'v' variable name
             upath is the 'u' nc file absolute path.
             vpath is the 'v' nc file absolute path.
             xmlpath is the xml file absolute path which must contains the
             u and v vars.
             outpath is the absolute path, where the generated plots should be
             stored. By default, it is None. It means, it should save in the
             current working directory itself.
             level is either single level, or list of levels or 'all'.
             'all' means, it takes all the availableLevels from the variables.
             level value must be int, float only. Not be string, other than
             'all' keyword.
             region is the region variable which should cut particular region
             shape from the global data. By default it is None, i.e. takes
             global data region itself.

             reference is the reference points to be plotted in the vcs
             vector plot. It must be float only.
             scale is the length of the arrow markers in the vcs vector plot.
             interval is the integer value, to split the U and V datasets,
             to make clear view of the vector plot. By default it takes 4.

             svg is the flag. If flag is set, then the vector plot should be
             saved as svg formate. By default it is 0.

             png is the flag. If flag is set, then the vector plot should be
             saved as png formate. By default it is 1.

    Condition : If we passed xmlpath, then we no need to pass upath and vpath
                args. uvar and vvar must be available in the passed filepath.

    Written By : Arulalan.T

    Date : 11.09.2011
    Updated: 11.12.2011

    """

    no = 0
    if xmlpath:
        xmlobj = cdms2.open(xmlpath)
        availableLevels = xmlobj[uvar].getLevel()[:]
        fname = xmlpath.split('/')[-1]
        filelist = fname.split('_')
        if filelist[1] == 'analysis':
            no = 1
    elif upath and vpath:
        fu = cdms2.open(upath)
        fv = cdms2.open(vpath)
        availableLevels = fu[uvar].getLevel()[:]
        filelist = upath.split('/')[-1].split('_')
        fname = filelist[-1]
        xmlpath = None
    else:
        raise("you must pass either xmlpath or (upath and vpath)")

    if 'anomaly' in filelist:
        processname = 'ANOMALY'
    elif 'analysis' in filelist:
        processname = 'MEAN ANALYSIS'
    elif 'fcstsyserr' in filelist:
        processname = 'FCST SYS ERR'
    else:
        processname = ''

    seamon = month.upper()
    # modelname
    startname = filelist[1 + no].upper()
    startname = startname.split('.')[0]
    # model hour
    hr = filelist[-1].split('.')[0]
    if hr.endswith('hr'):
        # get the forecast hour from the file name
        hr = int((hr.split('hr')[0]).split('f')[1])
        day = hr / 24.0
        # keep as float if day is not 24's multiple
        if not hr % 24.0:
            day = int(day)
        startname += ' ' + 'D0' + str(day)
    # end of if hr.endswith('hr'):
    # adding WINDS, season/month name, year
    endname = 'WINDS' + ' ' + seamon + ' ' + filelist[2 + no]

    global plotLevel
    if level:
        # if level has passed the over write the global plotLevel
        if isinstance(level, int):
            plotLevel = []
            plotLevel.append(level)
        elif isinstance(level, list):
            plotLevel = level
    if plotLevel == 'all':
        print "plotlevl is 'all'. So it takes all the availableLevels %s to plot wind vectors" % str(availableLevels)
        plotLevel = availableLevels

    for lev in plotLevel:
        if lev:
            lev = float(lev)
            if lev in availableLevels:
                plotname = startname + ' ' + processname + ' ' + str(int(lev)) + 'hPa' + ' ' + endname
                print "Plotting vector winds : ", plotname
                if region:
                    if xmlpath:
                        U = xmlobj(uvar, region, time = date, level = lev, squeeze = 1)
                        V = xmlobj(vvar, region, time = date, level = lev, squeeze = 1)
                    else:
                        U = fu(uvar, region, time = date, level = lev, squeeze = 1)
                        V = fv(vvar, region, time = date, level = lev, squeeze = 1)
                    # end of if xmlpath:
                else:
                    if xmlpath:
                        U = xmlobj(uvar, time = date, level = lev, squeeze = 1)
                        V = xmlobj(vvar, time = date, level = lev, squeeze = 1)
                    else:
                        U = fu(uvar, time = date, level = lev, squeeze = 1)
                        V = fv(vvar, time = date, level = lev, squeeze = 1)
                    # end of if xmlpath:
                # calling vectorPlot function to plot using vcs
                plot.vectorPlot(U, V, plotname, outpath, reference, scale,
                                interval, svg, png, latlabel, lonlabel, style)
            else:
                print "Skipping vector plot for %s level of plotLevel, since \
                       it is not available in the variable" % str(lev)
        else:
            pass
            # empty string level
    # free memory
    del U, V
    if xmlpath:
        xmlobj.close()
    else:
        fu.close()
        fv.close()
# end of def genVectorPlots(...):

def getProcessPath(modelname, processtype, year, monthseason, hour=None):
    """
    :func:`getProcessPath`: By passing fewer args and get the correct and
        absolute path of the process files, which generated by automated or
        manual for the purpose of this diagnosis.

    Inputs : modelname is the part of the directory structure.
             processtype is any one of the processes.for eg : 'Mean Analysis',
             or 'Mean Fcst' or 'Anomaly' or 'FcstSysErr', etc.,
             year is year in string type.
             monthseason is either month name or season name. It should find
             out either it is month or season and make the correct path.
             hour is the hour string which is the part of the directory
             structure only for 'FcstSysErr' and 'Mean Fcst' process type.

    Outputs : Return the absolute path of the process files, only if that
              directory is exists. Other wise it raise error.

    To Do : Need to decide about, either it should raise error, or it should
            return None, if wrong args passed or process directory doesnot
            exists.

    Written By : Arulalan.T

    Date : 11.09.2011
    Updated: 11.12.2011

    """

    processtype = processtype.lower()
    if not processtype in ['anomaly', 'mean analysis', 'mean fcst', 'fcstsyserr']:
        raise ValueError("processtype must be any one of 'anomaly', \
                        'mean analysis', 'mean fcst', 'fcstsyserr' only")

    if processtype in ['fcstsyserr', 'mean fcst']:
        if not hour:
            raise ValueError("you must pass hour to find out the dir of fcst/fcstsyserr")

    processsubtype = ''
    if processtype == 'fcstsyserr':
        processtype = 'FcstSysErr'
    elif processtype.startswith('mean'):
        processsubtype = processtype.split(' ')[1].capitalize()
        processtype = 'Mean'
    else:
        processtype = processtype.capitalize()

    proyearpath = os.path.join(processfilesPath, modelname, processtype, year)

    if not os.path.isdir(proyearpath):
        raise ValueError('The passed %s year directory doesnot exists' % year)

    processpath = ''
    for seasonName in seasons.keys():
        if seasonName.lower() == monthseason:
            processpath = os.path.join(proyearpath, 'Season', monthseason)

    if not processpath:
        processpath = os.path.join(proyearpath, 'Month')
    if os.path.isdir(processpath):
        if processtype == 'FcstSysErr' or processsubtype == 'Fcst':
            prohrpath = os.path.join(processpath, hour)
            if os.path.isdir(prohrpath):
                return prohrpath
            else:
                raise ValueError('passed hour %s dir doesnot exists')
        elif processsubtype == 'Analysis':
            proanlpath = os.path.join(processpath, 'Analysis')
            if os.path.isdir(proanlpath):
                return proanlpath
            else:
                raise ValueError('Analysis dir doesnot exists in %s' % proanlpath)
        else:
            return processpath
    else:
        raise ValueError('The passed monthseason %s doesnot exists under \
                          either Season or Month sub directory' % monthseason)
# end of def getProcessPath(...):

def editVectorPlot(modelname, processtype, year, monthseason, hour=None,
                         level=None, region=None, reference=20, scale=1,
                              interval=4, svg=0, png=1, latlabel='lat5',
                                          lonlabel='lon5', outpath=None):
    """
    :func:`editVectorPlot` : To edit/reproduce any particular vector plots by
        passing modelname, processtype, year, month/season, hour, level(s),
        region, reference point of vector, scale of vector arrow markers,
        interval of the U & V datasets, svg & png options.

    Inputs : modelname is the part of the directory structure.
             processtype is any one of the processes.for eg : 'Mean Analysis',
             'Mean Fcst' or 'Anomaly' or 'FcstSysErr', etc.,
             year is year in string type.
             monthseason is either month name or season name. It should find
             out either it is month or season and make the correct path.
             hour is the hour string which is the part of the directory
             structure only for 'FcstSysErr' and 'Mean Fcst' process type.

             level is either single level, or list of levels or 'all'.
             'all' means, it takes all the availableLevels from the variables.
             level value must be int, float only. Not be string, other than
             'all' keyword.
             region is the region variable which should cut particular region
             shape from the global data. By default it is None, i.e. takes
             global data region itself.

             reference is the reference points to be plotted in the vcs
             vector plot. It must be float only.
             scale is the length of the arrow markers in the vcs vector plot.
             interval is the integer value, to split the U and V datasets,
             to make clear view of the vector plot. By default it takes 4.

             svg is the flag. If flag is set, then the vector plot should be
             saved as svg formate. By default it is 0.

             png is the flag. If flag is set, then the vector plot should be
             saved as png formate. By default it is 1.

             outpath is the absolute path, where the generated plots should be
             stored. By default, it is None, that is it should save in the
             appropirate plotsgraphs directory, which is generated by this
             function.

    Written By : Arulalan.T

    Date : 11.09.2011
    Updated: 11.12.2011

    """

    processpath = getProcessPath(modelname, processtype, year, monthseason, hour)
    #processpath = os.path.join(modelname, processtype, year, monthseason, hour)
    xmlflag = 0
    pathlist = processpath.split('/')
    if 'Season' in pathlist:
        xmlflag = 1

    if outpath:
        if os.path.isdir(outpath):
            plotpath = outpath
        else:
            raise ValueError("The outpath %s doesnot exists" % outpath)
    else:
        # remove the process file root path
        for path in processfilesPath.split('/'):
            if not path == '':
                pathlist.remove(path)
        # if it is Month process then in the plots path, we need to insert the
        # month name. Since process path doesnot hv month name folder.
        if 'Month' in pathlist:
            monthidx = pathlist.index('Month')
            pathlist.insert(monthidx + 1, monthseason)
        # append 'WINDS' plot name in the plot graph least node path.
        pathlist.append('WINDS')
        # generate the complete outpath to store the edited vector plots
        plotpath = os.path.join(plotsgraphsPath, *pathlist)
    # end of if outpath:

    uvar, vvar = None, None
    # get the u and v variable name from the global 'vars.txt'
    uvar = variables.get(modelname).get('u').model_var
    vvar = variables.get(modelname).get('v').model_var

    files = os.listdir(processpath)
    for xfile in files:
        if xmlflag:
            if xfile.endswith('.xml'):
                uvxmlpath = processpath + '/' + xfile
        else:
            if xfile.endswith('.nc') and xfile.startswith(uvar):
                uncpath = processpath + '/' + xfile
            elif xfile.endswith('.nc') and xfile.startswith(vvar):
                vncpath = processpath + '/' + xfile
    # end of for xfile in files:

    if xmlflag:
        genVectorPlots(uvar, vvar, None, None, uvxmlpath, plotpath, level,
                                        region, reference, scale, interval,
                                              svg, png, latlabel, lonlabel)
    else:

        genVectorPlots(uvar, vvar, uncpath, vncpath, None, plotpath, level,
                                        region, reference, scale, interval,
                                              svg, png, latlabel, lonlabel)
# end of def editVectorPlot(...):

if __name__ == '__main__':

    for Model in models:
        xmlobj = xml_data_access.GribXmlAccess(Model.path)
        # get the model variable name from the global 'vars.txt'
        mvar = variables.get(Model.name).values()[0].model_var
        modeldataset = xmlobj[mvar, 'a']
        # get the timeAxis of modeldata set and correct its bounds
        modeltime = timobj._correctTimeAxis(modeldataset.getTime())
        # get the fully available months
        availableMonths = timobj.getTimeAxisFullMonths(modeltime)
        # calling func to geneate month anomaly directories and its plots
        genMonthAnomalyDirs(Model.name, availableMonths)
        # calling func to geneate month mean directories and its plots
        genMonthMeanDirs(Model.name, availableMonths)
        # calling func to geneate season mean directories and its plots
        genSeasonMeanDirs(Model.name, availableMonths)
        # calling func to geneate season fcstsyserr directories and its plots
        genSeasonFcstSysErrDirs(Model.name, Model.hour, availableMonths)
        # close the xml objects
        xmlobj.closeXmlObjs()
    # end of for model in models:
    print "Done! Creation of all vector plots"
# end of if __name__ == '__main__':
