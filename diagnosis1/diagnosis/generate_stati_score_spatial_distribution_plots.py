import os
import sys
import cdms2
# setting the absolute path of the previous directory
# getting the this py module path by __file__ variable
# pass that __file__ to the os.path.dirname, returns the path of this module
__diagnosisDir__ = os.path.dirname(__file__)
previousDir = os.path.abspath(os.path.join(__diagnosisDir__, '..'))
# adding the previous path to python path
sys.path.append(previousDir)
# importing plot.py, xml_data_acces.py, TimeUtility from previous directory
# uv_cdat_code.diagnosisutils
import uv_cdat_code.diagnosisutils.plot as plot
import uv_cdat_code.diagnosisutils.xml_data_access as xml_data_access
from uv_cdat_code.diagnosisutils.timeutils import TimeUtility
from uv_cdat_code.diagnosisutils.regions import India
from diag_setup.globalconfig import models, threshold, processfilesPath, \
                               plotsgraphsPath, seasons
from diag_setup.varsdict import variables
from diag_setup.gendir import createDirsIfNotExists

# create time utility object
timobj = TimeUtility()


def genSeasonStatiScoreDirs(modelName, modelHour, availableMonths):
    """
    :func:`genSeasonStatiScoreDirs`: It should generate the directory hierarichy
        structure of season statiscore in the plotsgraphspath. And calls the
        function genIsoFillPlots to make 'isofill' plots and save it
        inside the appropirate directory, by reading the nc file of the
        appropirate process season hour statiscore files path.

        It should plot for all the vars of that statiscore spatial distributed
        nc files.

    Inputs : modelName is the one of the directories name.
             modelHour is the one of the directories name.
             availableMonths is the dictionary which is generated by fully
             available months from the timeAxis.

    Written By : Arulalan.T

    Date : 26.09.2011

    """
    global plotLevel
    processStatiScorePath = os.path.join(processfilesPath, modelName, 'StatiScore')
    for year in availableMonths:
        # get the months dictionary
        monthdic = availableMonths.get(year)
        # sort the months in correct order
        months = timobj._sortMonths(monthdic.keys())
        year = str(year)
        processStatiSeasonPath = os.path.join(processStatiScorePath, year, 'Season')
        for seasonName, season in seasons.iteritems():
            # find out xml time axis months has the seasonal months or not
            seasonMonths = [month for smonth in season for month in months
                            if smonth[:3].lower() == month[:3].lower()]
            if len(seasonMonths) == len(season):
                print "Got the seasonal months for %s season" % seasonName
            else:
                print "Seasonal months are not available for %s season" % seasonName
                continue
            if seasonName.isupper():
                seasonName = seasonName.lower()
            proStatiSeasonChildPath = os.path.join(processStatiSeasonPath, seasonName)
            # plotting isofill images for all hours
            for hr in modelHour:
                # get the process statistical score hour path
                proStatiHrPath = os.path.join(proStatiSeasonChildPath, hr)
                # Do process if process stati score hour directory is exists
                if not os.path.isdir(proStatiHrPath):
                    print "the %s hour process path doesnot exist in the \
                            path %s. So skipping isofill season plots " % (hr, proStatiHrPath)
                    continue
                # get the available files from this directory
                files = os.listdir(proStatiHrPath)
                if not files:
                    continue
                    # process empty directory. need to log about this.
                    # process files cant be empty, very less chance.
                # end of if not files:
                # get the nc file name
                ncfile = [ncfile for ncfile in files if ncfile.endswith('.nc')\
                if ncfile.startswith('stati_spatial_distribution_score')][0]

                if not ncfile:
                    # ncfile is none
                    print "The path %s doesnt have nc file" % proStatiHrPath
                    print "here obtained nc file is %s" % ncfile
                    continue
                # get the nc file path
                ncPath = proStatiHrPath + '/' + ncfile

                # create modelName, StatiScore, year, Season, hour
                # directories if it is not exists
                plotSeasonHrPath = createDirsIfNotExists(plotsgraphsPath,
                                          [modelName, 'StatiScore', year,
                                               'Season', seasonName, hr])

                if not os.listdir(plotSeasonHrPath):
                    # directory is empty. So calling below function
                    # to create all isofillline plot image files
                    # in stati score directory of plotsgraphspath.
                    genIsoFillPlots(var = 'all', path = ncPath,
                                    outpath = plotSeasonHrPath,
                                    region = India)
                else:
                    pass
                    # directory is non empty. Have to check either
                    # all vars plots image files are exists or not
                # end of if not os.listdir(plotSeasonHrPath):
            # end of for hr in modelHour:
        # end of for month in months.keys():
    # end of for year in availableMonths.keys():
    print "Done! creation of isoFill plots of season stati score for model %s" % modelName
# end of def genSeasonStatiScoreDirs(modelName, modelHour, availableMonths):

def genIsoFillPlots(var, path, outpath=None, region=None, svg=0, png=1):
    """
    :func:`genIsoFillPlots`: It should generate the directory least hierarichy
        structure of season statiscore in the plotsgraphspath,by the plotname.

        It should plot for all the vars of that statiscore spatial distributed
        nc files.

    Inputs : var is the variable name. If var is 'all' means, then it should
             plot the isofill for all the available variables in the passed
             path nc or xml file.

             path is an absolute nc or xml file path.

             outpath is the path to store the images. If it is None means, it
             should create the least (plotname)directory in the current
             directory path itself and save it.

             region to extract the region from the var data.

             if svg is 1, then plot should be saved as svg.
             if png is 1, then plot should be saved as png.

      ..note:: isoLevels and isoColors are set inbuilt (some default) range of
            levels and colors with respect to the variable name of statistical
            scores.

    Written By : Dileep Kumar.R, Arulalan.T

    Date : 26.09.2011

    """

    f = cdms2.open(path)
    allvars = None
    if var == 'all':
        # var is all. So we have to take all the vars from passed ncpath.
        allvars = [var for var in f.listvariable() if not var.startswith('bounds')]
    else:
        if isinstance(var, list):
            allvars = var
        else:
            allvars = [var]

    if not outpath:
        # get the current workig directory
        outpath = os.getcwd()

    filelist = path.split('/')[-1].split('_')
    seamon = filelist[-3].upper()
    # modelname
    startname = filelist[-1].split('.')[0].upper()
    # hour
    hr = filelist[-4].split('.')[0]
    if hr.endswith('hr'):
        hr = int(hr.split('hr')[0])
        day = hr / 24.0
        # keep as float if day is not 24's multiple
        if not hr % 24.0:
            day = int(day)
        startname += ' ' + 'D0' + str(day)
    # end of if hr.endswith('hr'):
    # add season/month name, year
    endname = ' ' + seamon + ' ' + filelist[-2]

    for varName in allvars:
        scoreName = varName.upper()
        # create plot name directory if it is not exists
        scoreNamePath = createDirsIfNotExists(outpath, scoreName)
        # setting isoLevels and isoColors w.r.t variable

        if scoreName in ['TS', 'POD', 'POFD', 'HR', 'FAR']:
            # Statistical score lies between [0, 1]
            isoLevels = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]
            isoColors = [246, 255, 252, 253, 254, 251, 140, 5, 171,
                                                 248, 249, 242, 239]
        elif scoreName in ['BS', 'ODR']:
            # Statistical score lies between [0, infinity]
            isoLevels = [0.2, 0.4, 0.6, 0.8, 1, 5, 10, 25, 50]
            isoColors = [246, 255, 252, 253, 254, 251, 140, 5, 171,
                                                 248, 249, 242, 239]
        elif scoreName in ['KSS', 'ORSS', 'EDS']:
            # Statistical score lies between [-1, 1]
            isoLevels = [-0.8, -0.6, -0.4, -0.2, 0, 0.2, 0.4, 0.6, 0.8, 0.9]
            isoColors = [246, 255, 252, 253, 254, 251, 140, 5, 171,
                                                 248, 249, 242, 239]
            #(246, 255, 252, 253, 140, 5, 171, 248, 249,242, 239)
        elif scoreName in ['ETS']:
            # Statistical score lies between [-0.3, 1]
            isoLevels = [-0.3, -0.1, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]
            isoColors = [246, 255, 252, 253, 254, 251, 140, 5, 171,
                                                 248, 249, 242, 239]

        elif scoreName in ['HSS']:
            # Statistical score lies between [-infinity, 1]
            isoLevels = [-50, -25, -10, -5, -1, -0.5, 0, 0.4, 0.8, 0.9]
            isoColors = [246, 255, 252, 253, 254, 251, 140, 5, 171,
                                                 248, 249, 242, 239]
        elif scoreName in ['LODR']:
            # Statistical score lies between [-infinity, infinity]
            isoLevels = [-50, -25, -10, -5, -1, -0.5, 0, 0.4, 0.8,
                                                 1, 5, 10, 25, 50]
            isoColors = [250, 244, 246, 255, 252, 253, 251, 140, 5,
                                      171, 180, 192, 249, 210, 239]
        else:
            print "variable doesnot match with any one to set the isoLevels \
                    and isoColors. " % varName
            print "So skipping isoFill plot for this variable"
            continue
        # end of if scoreName in ['TS', 'POD', 'POFD', 'HR', 'FAR']:

        for th in threshold:
            # get the data
            stati_spatial_score = f(varName, threshold = th, squeeze = 1)
            # get the long name
            processname = stati_spatial_score.long_name.upper()
            plotname = startname + ' ' + processname + ' '
            plotname += str(th) + ' ' + 'THRESHOLD' + endname
            if region:
                # extract region data
                stati_spatial_score = stati_spatial_score(region)
            print "Plotting IsoFill : ", plotname
            plot.isoFillPlot(stati_spatial_score, isoLevels, isoColors,
                                            plotname, scoreNamePath, svg, png)
        # end of for th in threshold:
    # end of for varName in allvars:
    f.close()
# end of def genIsoFillPlots(...):

if __name__ == '__main__':

    for Model in models:
        xmlobj = xml_data_access.GribXmlAccess(Model.path)
        # get the model variable name from the global 'vars.txt'
        mvar = variables.get(Model.name).values()[0].model_var
        modeldataset = xmlobj[mvar, 'a']
        # get the timeAxis of modeldata set and correct its bounds
        modeltime = timobj._correctTimeAxis(modeldataset.getTime())
        # get the fully available months
        availableMonths = timobj.getTimeAxisFullMonths(modeltime)
        # calling func to generate season statiscore directories and its plots
        genSeasonStatiScoreDirs(Model.name, Model.hour, availableMonths)
        # close the xml objects
        xmlobj.closeXmlObjs()
    # end of for model in models:
    print "Done! Creation of all isoFill plots"
# end of if __name__ == '__main__':
